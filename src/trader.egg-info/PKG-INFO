Metadata-Version: 2.4
Name: trader
Version: 0.1.0
Summary: Minimal runnable CLI + installers for a trading platform scaffold
Requires-Python: >=3.11
Description-Content-Type: text/markdown
Requires-Dist: typer>=0.12
Requires-Dist: pydantic>=2
Requires-Dist: python-dotenv>=1
Requires-Dist: rich>=13

# Gigatrader

Gigatrader is a production-grade scaffold for an automated US equities and equity options trading platform built on **Python 3.11** and **alpaca-py**. The project emphasises guardrails-first design, paper trading by default, and transparent risk management for short-term trading strategies.

## Features
- Paper trading as default mode with environment flag required for live execution.
- Centralised async rate-limited execution queue with backoff and idempotent orders.
- Strategy scaffolds for equities momentum/ORB and options directional & debit spread trading.
- Configurable risk presets with pre-trade checks for equities and options.
- Event-driven backtester with placeholders for realistic execution modelling.
- Streamlit dashboard tailored for non-technical operators.
- Typer-based CLI for orchestrating paper runs, backtests (with HTML reports), and guarded live stubs.

## Installation & Quickstart

### Windows (PowerShell)
1. Ensure **Python 3.11** is installed and available via the `py` launcher (`py -3.11 -V`).
2. Open **Windows PowerShell** in the repository root and run:
   ```powershell
   powershell -ExecutionPolicy Bypass -File .\scripts\install.ps1
   ```
   The installer creates a `.venv` virtual environment, installs dependencies, and scaffolds missing config files.
3. To verify the setup, launch the paper-trading stub:
   ```bat
   scripts\run_paper.bat
   ```
4. Optional: run a sample backtest report
   ```bat
   scripts\run_backtest.bat --days 2 --universe AAPL,MSFT
   ```

### macOS / Linux (manual)
1. Install **Python 3.11** and create a virtual environment at the repo root:
   ```bash
   python3.11 -m venv .venv
   source .venv/bin/activate
   ```
2. Install dependencies and the CLI in editable mode:
   ```bash
   pip install -U pip setuptools wheel
   pip install -r requirements.txt
   pip install -e .
   ```
3. Copy configuration templates if they do not exist:
   ```bash
   cp .env.example .env        # then add your Alpaca keys
   cp config.example.yaml config.yaml
   ```
4. Run the CLI directly:
   ```bash
   trade paper --config config.yaml
   ```

### Environment Variables
- Update `.env` with your Alpaca credentials; the CLI will warn when keys are missing.
- Live trading requires `LIVE_TRADING=true` at runtime and remains disabled by default for safety.

## CLI Usage
- `trade paper` — loads configuration and runs a cancellable heartbeat loop for paper trading simulations.
- `trade backtest --days N --universe SYMBOLS` — generates a timestamped HTML report under `./reports/`.
- `trade live` — refuses to execute unless `LIVE_TRADING=true`, failing closed with exit code 2 otherwise.

## Directory Layout
```
core/         # Interfaces, config, rate limiting, kill switch, utilities
data/         # Data provider adapters (Alpaca)
execution/    # Broker adapters and order routing
strategies/   # Strategy implementations and shared signal utilities
risk/         # Risk manager and presets
backtest/     # Backtesting engine, metrics, reports
ui/           # Streamlit application
scripts/      # CLI entrypoints and helper scripts
notebooks/    # Research and exploratory analysis
tests/        # Unit, property, and integration tests
```

## Guardrails
- Live trading requires `LIVE_TRADING=true` environment variable; otherwise the system fails closed.
- `trade halt` CLI command and `.kill_switch` file provide global kill-switch.
- Risk manager enforces global exposure, per-trade, and options-specific limits before every order.
- Rate limiter respects Alpaca rate limit headers and uses jittered exponential backoff.

## Streamlit UI
Launch via `poetry run streamlit run ui/app.py` to interact with the dashboard scaffold.

## Backtesting
See `notebooks/sample_backtest.ipynb` and `scripts/run_backtest_example.sh` for a minimal example of running the backtest engine.

## Contributing
- Format code with `ruff` and `black` (via `ruff format`).
- Maintain >80% coverage with `pytest --cov` (CI enforced).
- Use type hints everywhere and keep strategy logic deterministic for testing.

## Disclaimer
This repository is a scaffold and **not** ready for production trading without substantial development, validation, and regulatory compliance work.
